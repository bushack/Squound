using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SquoundApp_v1.Models;
using SquoundApp_v1.Pages;
using SquoundApp_v1.Services;

namespace SquoundApp_v1.ViewModels
{
    public partial class AboutViewModel : BaseViewModel
    {
        [ObservableProperty]
        private AboutModel model;

        private readonly AboutUsService service;

        public AboutViewModel(AboutUsService service)
        {
            this.service = service;

            Title = "About Us";
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task InitializeAsync()
        {
            if (Model is null)
            {
                // Fetch data only if the model is not already populated.
                await FetchDataAsync();
            }
            else
            {
                // If the model is already populated, we can skip fetching data.
                Console.WriteLine("Model is already populated, skipping fetch.");
            }
        }

        /*
         * Instructs the shell to go to the AboutUs page.
         * We bind this command to the button in the FooterView.xaml file.
         * The code that performs the binding is auto generated by the .NET MAUI framework.
         * The name of the auto-generated command replaces 'Async' with 'Command'.
         */
        [RelayCommand]
        async Task GoToPageAsync()
        {
            // The model contains the data fetched from the service (AboutUsService).
            // If the model is null, it means that the data has not been fetched yet.
            // This is necessary because the model will contain all the data that will
            // be displayed on the AboutUs page.
            if (Model is null)
                await FetchDataAsync();

            // This is the call that initiates the change of page.
            await Shell.Current.GoToAsync(nameof(AboutPage));
        }

        /*
         * This method causes the service to fetch the data required to build the model.
         * It is called when the user navigates to the AboutUs page.
         */
        [RelayCommand]
        public async Task FetchDataAsync()
        {
            if (IsBusy)
                return;

            try
            {
                IsBusy = true;

                Model = await service.GetHTTP();
            }

            catch (Exception ex)
            {
                // Handle exceptions, e.g., log them or show an alert to the user.
                Console.WriteLine($"Error fetching data: {ex.Message}");

                await Shell.Current.DisplayAlert(
                    "Error",
                    "An error occurred while attempting to fetch data",
                    "OK");
            }

            finally
            {
                IsBusy = false;
            }
        }
    }
}
